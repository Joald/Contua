type Box a = Boxed a;
type Tree a = Node a (Tree a) (Tree a) | Nothing;

[Int] ::
papaj = [2, 1, 3, 7];

Int -> Int ::
fib n = if n <= 1
          then 1
          else fib (n - 1) + fib (n - 2);

Int -> Int ::
fac n = if n == 0
          then 1
          else n * fac (n - 1);

Int -> Int ::
fac2 = fn n . if n == 0
               then 1
               else n * fac2 (n - 1);

a -> a ::
id x = x;

Int -> Int ::
intId = id;

Int ::
letIdTest = let f = (fn x . x) in let g = f True in f 3;