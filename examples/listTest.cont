type TwoLists a b = TwoLists [a] [b];

[a] -> Maybe a ::
safeHead xs c = match xs with
  | h : _ => c (Just h)
  | [] => c Nothing;

(a -> b -> c) -> [a] -> [b] -> Maybe c ::
joinSafeHeads f xs ys c = match TwoLists xs ys with
  | TwoLists [] [] => Nothing
  | TwoLists [] t  => Nothing
  | TwoLists t []  => Nothing
  | TwoLists (h1:_) (h2:_) => comp c Just (f h1 h2);

Maybe Int ::
main = safeHead [2, 1, 3, 7] id;