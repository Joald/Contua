# prelude.cont
# this file is loaded before all the input files by the interpreter and contains basic
# definitions of standard library functions and types.

type Bool = True | False;
type Maybe a = Just a | Nothing;
type Either e a = Left e | Right a;

a -> a ::
id x = x;

id2 = \x.x;

Int -> Int ::
succ x = x + 1;

(a -> b) -> (b -> c) -> a -> c ::
comp f g x = g (f x);

(a -> b) -> [a] -> [b] ::
map f xs = match xs with
  | [] => []
  | h:t => f h : map f t;

(a -> (b -> c) -> c) -> [a] -> ([b] -> c) -> c ::
contMap f xs c = match xs with
  | [] => c []
  | h:t => f h (\x . contMap f t (\rest . c (x : rest)));

a -> b -> a ::
const x _ = x;