# prelude.cont
# this file is loaded before all the input files by the interpreter and contains basic
# definitions of standard library functions and types.

type Bool = True | False;
type Maybe a = Just a | Nothing;
type Either e a = Left e | Right a;
type Pair a b = Pair a b;


a -> a ::
id x = x;

id2 = \x.x;

Int -> Int ::
succ x = x + 1;

(b -> c) -> (a -> b) -> a -> c ::
comp f g x = f (g x);

(a -> b) -> [a] -> [b] ::
map f xs = match xs with
  | [] => []
  | h:t => f h : map f t;


a -> b -> a ::
const x _ = x;

(a -> b) -> a -> b -> a -> b ::
mapsTo f x y a =
  if a == x
    then y
    else f a;

(a -> b) -> [a] -> [b] -> a -> b ::
multiMapsTo f xs ys = match Pair xs ys with
| Pair [] _ => f
| Pair _ [] => f
| Pair (x:xs) (y:ys) => multiMapsTo (mapsTo f x y) xs ys;

type Return a = Return a;

unReturn x = match x with | Return y => y;

